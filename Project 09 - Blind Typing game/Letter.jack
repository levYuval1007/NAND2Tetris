/** this class represents a single letter object */
class Letter{

    field int x,y;  // coordinates of the letter frame (top left)
    field int letterAddress; // the RAM address of the letter graphic, assuming
    // the screen starts at RAM 0.
    field char letter; // letter value (65-82)
    field int memAddress; // the real RAM address of the letter.
    field int bottomEdge;  // the y coordinate of the bottom edge in the letter frame
    field boolean inGame;  // is letter on screen or not
    field int frameSize;

    constructor Letter new(int Ax, char curLetter)
    {
        let inGame = false;
        let x = Ax;
        let y=0;
        let letter = curLetter;
        let frameSize = 29;
        let letterAddress = Math.divide(x,16)+225;
        let bottomEdge=frameSize;
        return this;
    }

    /** updating the location of a letter */
    method void editLocation(int a){
       let y = y + a;
       let letterAddress = 32 * a + letterAddress;
       return;
    }

    /** changing the state of a letter from "in game" to "not in game" and vice
     versa */
    method void changeInGame(){
        if (~inGame){
          do drawObject();
        }
        let inGame = ~inGame;
        return;
    }

    /** if letter in game, move down */
    method void updateState(){
        if (inGame){
            do moveDown();
            }
        return;
    }

    method int getBottomEdge(){
        return bottomEdge;
    }

    method boolean getInGame(){
        return inGame;
    }

    /** drawing letter object to screen (black frame, white frame and letter) */
    method void drawObject(){
        do Screen.setColor(true);
        do Screen.drawRectangle(x,y, x+frameSize, y+frameSize);
        do Screen.setColor(false);
        do Screen.drawRectangle(x+4, y+4, x+25, y+25);
        do drawLetter();
        return;
    }

    /** moving down the letter by 2 pixels. */
    method void moveDown() {
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x + frameSize, y + 1);
        let y = y + 2;
        do Screen.setColor(true);
        do Screen.drawRectangle(x, (y + frameSize) - 1, x + frameSize, y + frameSize);

        do Screen.setColor(true);
        do Screen.drawRectangle(x, y+2, x + frameSize, y + 3);
        do Screen.setColor(false);
        do Screen.drawRectangle(x+4, y+4, x+25, y+25);

        let letterAddress = letterAddress+64;
        do drawLetter();
        let bottomEdge=bottomEdge+2;
      return;
   }

    /** this method is recycling a letter object, i.e updating letter value and
     frame coordinates, and deletes the letter from screen */
   method void rewindLetter(char newLetter){
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x+frameSize, y+frameSize);
        let y = 0;
        let letterAddress = Math.divide(x,16)+225;
        let letter = newLetter;
        let bottomEdge = frameSize;
        do changeInGame();
        return;
   }

   method char getLetter(){
        return letter;
   }

    /** drawing the letter according to its current value */
    method void drawLetter()
    {
        if (letter = 76){  // letter L
            do drawL();
        }
        if (letter = 69){  //letter E
           do drawE();
        }
        if (letter = 73){ // letter I
            do drawI();
        }
        if (letter = 70){ // letter F
            do drawF();
        }
        if (letter = 72){ // letter H
            do drawH();
        }
        if (letter = 65){  // letter A
            do drawA();
        }
        if (letter = 71){  // letter G
            do drawG();
        }
        if (letter = 67){  // letter C
            do drawC();
        }
        if (letter = 68){  // letter D
            do drawD();
        }
        if (letter = 66){  // letter B
            do drawB();
        }
        if (letter = 82){  // letter R
            do drawR();
        }
        if (letter = 80){  // letterP
            do drawP();
        }
        if (letter = 74){  // letter J
            do drawJ();
        }
        if (letter = 75){  // letter K
            do drawK();
        }
        if (letter = 77){  // letter M
            do drawM();
        }
        if (letter = 78){  // letter N
            do drawN();
        }
        if (letter = 79){  // letter O
            do drawO();
        }
        if (letter = 81){  // letter Q
            do drawQ();
        }
        if (letter = 86){ // letter V
            do drawV();
        }

        return;
    }

    /** the following methods are drawing all the letters for the game */

    method void drawL()
    {
        let memAddress = 16384+letterAddress;
        do Memory.poke(memAddress+0, 3);
        do Memory.poke(memAddress+32, 3);
        do Memory.poke(memAddress+64, 3);
        do Memory.poke(memAddress+96, 3);
        do Memory.poke(memAddress+128, 3);
        do Memory.poke(memAddress+160, 3);
        do Memory.poke(memAddress+192, 3);
        do Memory.poke(memAddress+224, 3);
        do Memory.poke(memAddress+256, 3);
        do Memory.poke(memAddress+288, 3);
        do Memory.poke(memAddress+320, 3);
        do Memory.poke(memAddress+352, 3);
        do Memory.poke(memAddress+384, 3);
        do Memory.poke(memAddress+416, 3);
        do Memory.poke(memAddress+448, -1);
        do Memory.poke(memAddress+480, -1);
        return;
    }

    method void drawE()
    {
        let memAddress = 16384+letterAddress;
        do Memory.poke(memAddress+0, -1);
        do Memory.poke(memAddress+32, -1);
        do Memory.poke(memAddress+64, 3);
        do Memory.poke(memAddress+96, 3);
        do Memory.poke(memAddress+128, 3);
        do Memory.poke(memAddress+160, 3);
        do Memory.poke(memAddress+192, 3);
        do Memory.poke(memAddress+224, -1);
        do Memory.poke(memAddress+256, -1);
        do Memory.poke(memAddress+288, 3);
        do Memory.poke(memAddress+320, 3);
        do Memory.poke(memAddress+352, 3);
        do Memory.poke(memAddress+384, 3);
        do Memory.poke(memAddress+416, 3);
        do Memory.poke(memAddress+448, -1);
        do Memory.poke(memAddress+480, -1);
        return;
    }

    method void drawI(){

        let memAddress = 16384+letterAddress;
        do Memory.poke(memAddress+0, -1);
        do Memory.poke(memAddress+32, -1);
        do Memory.poke(memAddress+64, 384);
        do Memory.poke(memAddress+96, 384);
        do Memory.poke(memAddress+128, 384);
        do Memory.poke(memAddress+160, 384);
        do Memory.poke(memAddress+192, 384);
        do Memory.poke(memAddress+224, 384);
        do Memory.poke(memAddress+256, 384);
        do Memory.poke(memAddress+288, 384);
        do Memory.poke(memAddress+320, 384);
        do Memory.poke(memAddress+352, 384);
        do Memory.poke(memAddress+384, 384);
        do Memory.poke(memAddress+416, 384);
        do Memory.poke(memAddress+448, -1);
        do Memory.poke(memAddress+480, -1);
	    return;

    }

    method void drawF(){
        let memAddress = 16384+letterAddress;
        do Memory.poke(memAddress+0, 32767);
        do Memory.poke(memAddress+32, 32767);
        do Memory.poke(memAddress+64, 3);
        do Memory.poke(memAddress+96, 3);
        do Memory.poke(memAddress+128, 3);
        do Memory.poke(memAddress+160, 3);
        do Memory.poke(memAddress+192, 3);
        do Memory.poke(memAddress+224, 32767);
        do Memory.poke(memAddress+256, 32767);
        do Memory.poke(memAddress+288, 3);
        do Memory.poke(memAddress+320, 3);
        do Memory.poke(memAddress+352, 3);
        do Memory.poke(memAddress+384, 3);
        do Memory.poke(memAddress+416, 3);
        do Memory.poke(memAddress+448, 3);
        do Memory.poke(memAddress+480, 3);
        return;
    }

    method void drawH(){
        let memAddress = 16384+letterAddress;
        do Memory.poke(memAddress+0, -16381);
        do Memory.poke(memAddress+32, -16381);
        do Memory.poke(memAddress+64, -16381);
        do Memory.poke(memAddress+96, -16381);
        do Memory.poke(memAddress+128, -16381);
        do Memory.poke(memAddress+160, -16381);
        do Memory.poke(memAddress+192, -16381);
        do Memory.poke(memAddress+224, -1);
        do Memory.poke(memAddress+256, -1);
        do Memory.poke(memAddress+288, -16381);
        do Memory.poke(memAddress+320, -16381);
        do Memory.poke(memAddress+352, -16381);
        do Memory.poke(memAddress+384, -16381);
        do Memory.poke(memAddress+416, -16381);
        do Memory.poke(memAddress+448, -16381);
        do Memory.poke(memAddress+480, -16381);
        return;
    }

    method void drawA(){
        let memAddress = 16384+letterAddress;
        do Memory.poke(memAddress+0, 384);
        do Memory.poke(memAddress+32, 384);
        do Memory.poke(memAddress+64, 960);
        do Memory.poke(memAddress+96, 960);
        do Memory.poke(memAddress+128, 1632);
        do Memory.poke(memAddress+160, 1632);
        do Memory.poke(memAddress+192, 3120);
        do Memory.poke(memAddress+224, 3120);
        do Memory.poke(memAddress+256, 8184);
        do Memory.poke(memAddress+288, 8184);
        do Memory.poke(memAddress+320, 12300);
        do Memory.poke(memAddress+352, 12300);
        do Memory.poke(memAddress+384, 24582);
        do Memory.poke(memAddress+416, 24582);
        do Memory.poke(memAddress+448, -16381);
        do Memory.poke(memAddress+480, -16381);
        return;
    }

    method void drawG(){
        let memAddress = 16384+letterAddress;
        do Memory.poke(memAddress+0, 16376);
        do Memory.poke(memAddress+32, 32766);
        do Memory.poke(memAddress+64, 24582);
        do Memory.poke(memAddress+96, 3);
        do Memory.poke(memAddress+128, 3);
        do Memory.poke(memAddress+160, 3);
        do Memory.poke(memAddress+192, 3);
        do Memory.poke(memAddress+224, -29);
        do Memory.poke(memAddress+256, -29);
        do Memory.poke(memAddress+288, -16381);
        do Memory.poke(memAddress+320, -16381);
        do Memory.poke(memAddress+352, -8189);
        do Memory.poke(memAddress+384, 28679);
        do Memory.poke(memAddress+416, 14350);
        do Memory.poke(memAddress+448, 8188);
        do Memory.poke(memAddress+480, 4088);
        return;
    }

    method void drawC(){
        let memAddress = 16384+letterAddress;
        do Memory.poke(memAddress+0, 8184);
        do Memory.poke(memAddress+32, 16380);
        do Memory.poke(memAddress+64, 28686);
        do Memory.poke(memAddress+96, 24583);
        do Memory.poke(memAddress+128, 16387);
        do Memory.poke(memAddress+160, 3);
        do Memory.poke(memAddress+192, 3);
        do Memory.poke(memAddress+224, 3);
        do Memory.poke(memAddress+256, 3);
        do Memory.poke(memAddress+288, 3);
        do Memory.poke(memAddress+320, 3);
        do Memory.poke(memAddress+352, 16387);
        do Memory.poke(memAddress+384, 24583);
        do Memory.poke(memAddress+416, 28686);
        do Memory.poke(memAddress+448, 16380);
        do Memory.poke(memAddress+480, 8184);
        return;
    }

    method void drawD(){
        let memAddress = 16384+letterAddress;
        do Memory.poke(memAddress+0, 2047);
        do Memory.poke(memAddress+32, 4095);
        do Memory.poke(memAddress+64, 15363);
        do Memory.poke(memAddress+96, 28675);
        do Memory.poke(memAddress+128, 24579);
        do Memory.poke(memAddress+160, -16381);
        do Memory.poke(memAddress+192, -16381);
        do Memory.poke(memAddress+224, -16381);
        do Memory.poke(memAddress+256, -16381);
        do Memory.poke(memAddress+288, -16381);
        do Memory.poke(memAddress+320, -16381);
        do Memory.poke(memAddress+352, -8189);
        do Memory.poke(memAddress+384, 28675);
        do Memory.poke(memAddress+416, 15363);
        do Memory.poke(memAddress+448, 4095);
        do Memory.poke(memAddress+480, 2047);
        return;
    }

    method void drawB(){
        let memAddress = 16384+letterAddress;
        do Memory.poke(memAddress+0, 2046);
        do Memory.poke(memAddress+32, 4095);
        do Memory.poke(memAddress+64, 7171);
        do Memory.poke(memAddress+96, 6147);
        do Memory.poke(memAddress+128, 6147);
        do Memory.poke(memAddress+160, 6147);
        do Memory.poke(memAddress+192, 3075);
        do Memory.poke(memAddress+224, 2047);
        do Memory.poke(memAddress+256, 7171);
        do Memory.poke(memAddress+288, 6147);
        do Memory.poke(memAddress+320, 12291);
        do Memory.poke(memAddress+352, 12291);
        do Memory.poke(memAddress+384, 12291);
        do Memory.poke(memAddress+416, 6147);
        do Memory.poke(memAddress+448, 4095);
        do Memory.poke(memAddress+480, 2047);
        return;
    }

    method void drawR(){
        let memAddress = 16384+letterAddress;
        do Memory.poke(memAddress+0, 16382);
        do Memory.poke(memAddress+32, 32767);
        do Memory.poke(memAddress+64, -8189);
        do Memory.poke(memAddress+96, -16381);
        do Memory.poke(memAddress+128, -16381);
        do Memory.poke(memAddress+160, 24579);
        do Memory.poke(memAddress+192, 28675);
        do Memory.poke(memAddress+224, 14339);
        do Memory.poke(memAddress+256, 8191);
        do Memory.poke(memAddress+288, 4095);
        do Memory.poke(memAddress+320, 6147);
        do Memory.poke(memAddress+352, 14339);
        do Memory.poke(memAddress+384, 28675);
        do Memory.poke(memAddress+416, -8189);
        do Memory.poke(memAddress+448, -16381);
        do Memory.poke(memAddress+480, -32765);
        return;
    }

    method void drawP(){
        let memAddress = 16384+letterAddress;
        do Memory.poke(memAddress+0, 16382);
        do Memory.poke(memAddress+32, 32767);
        do Memory.poke(memAddress+64, -8189);
        do Memory.poke(memAddress+96, -16381);
        do Memory.poke(memAddress+128, -16381);
        do Memory.poke(memAddress+160, 24579);
        do Memory.poke(memAddress+192, 28675);
        do Memory.poke(memAddress+224, 16383);
        do Memory.poke(memAddress+256, 8191);
        do Memory.poke(memAddress+288, 3);
        do Memory.poke(memAddress+320, 3);
        do Memory.poke(memAddress+352, 3);
        do Memory.poke(memAddress+384, 3);
        do Memory.poke(memAddress+416, 3);
        do Memory.poke(memAddress+448, 3);
        do Memory.poke(memAddress+480, 3);
        return;
    }

    method void drawK(){
        let memAddress = 16384+letterAddress;
        do Memory.poke(memAddress+0, 3587);
        do Memory.poke(memAddress+32, 1795);
        do Memory.poke(memAddress+64, 899);
        do Memory.poke(memAddress+96, 451);
        do Memory.poke(memAddress+128, 227);
        do Memory.poke(memAddress+160, 115);
        do Memory.poke(memAddress+192, 59);
        do Memory.poke(memAddress+224, 31);
        do Memory.poke(memAddress+256, 31);
        do Memory.poke(memAddress+288, 59);
        do Memory.poke(memAddress+320, 115);
        do Memory.poke(memAddress+352, 227);
        do Memory.poke(memAddress+384, 451);
        do Memory.poke(memAddress+416, 899);
        do Memory.poke(memAddress+448, 1795);
        do Memory.poke(memAddress+480, 3587);
        return;
    }

    method void drawN(){
        let memAddress = 16384+letterAddress;
        do Memory.poke(memAddress+0, -16381);
        do Memory.poke(memAddress+32, -16381);
        do Memory.poke(memAddress+64, -16377);
        do Memory.poke(memAddress+96, -16369);
        do Memory.poke(memAddress+128, -16353);
        do Memory.poke(memAddress+160, -16325);
        do Memory.poke(memAddress+192, -16269);
        do Memory.poke(memAddress+224, -16157);
        do Memory.poke(memAddress+256, -15933);
        do Memory.poke(memAddress+288, -15485);
        do Memory.poke(memAddress+320, -14589);
        do Memory.poke(memAddress+352, -12797);
        do Memory.poke(memAddress+384, -9213);
        do Memory.poke(memAddress+416, -2045);
        do Memory.poke(memAddress+448, -4093);
        do Memory.poke(memAddress+480, -8189);
        return;
    }

    method void drawM(){
        let memAddress = 16384+letterAddress;
        do Memory.poke(memAddress+0, -8185);
        do Memory.poke(memAddress+32, -4081);
        do Memory.poke(memAddress+64, -10213);
        do Memory.poke(memAddress+96, -13261);
        do Memory.poke(memAddress+128, -14749);
        do Memory.poke(memAddress+160, -15421);
        do Memory.poke(memAddress+192, -15997);
        do Memory.poke(memAddress+224, -16381);
        do Memory.poke(memAddress+256, -16381);
        do Memory.poke(memAddress+288, -16381);
        do Memory.poke(memAddress+320, -16381);
        do Memory.poke(memAddress+352, -16381);
        do Memory.poke(memAddress+384, -16381);
        do Memory.poke(memAddress+416, -16381);
        do Memory.poke(memAddress+448, -16381);
        do Memory.poke(memAddress+480, -16381);
        return;
    }
    method void drawJ(){
        let memAddress = 16384+letterAddress;
        do Memory.poke(memAddress+0, 32766);
        do Memory.poke(memAddress+32, 32766);
        do Memory.poke(memAddress+64, 768);
        do Memory.poke(memAddress+96, 768);
        do Memory.poke(memAddress+128, 768);
        do Memory.poke(memAddress+160, 768);
        do Memory.poke(memAddress+192, 768);
        do Memory.poke(memAddress+224, 768);
        do Memory.poke(memAddress+256, 768);
        do Memory.poke(memAddress+288, 768);
        do Memory.poke(memAddress+320, 769);
        do Memory.poke(memAddress+352, 771);
        do Memory.poke(memAddress+384, 903);
        do Memory.poke(memAddress+416, 974);
        do Memory.poke(memAddress+448, 508);
        do Memory.poke(memAddress+480, 248);
        return;
    }

    method void drawO(){
        let memAddress = 16384+letterAddress;
        do Memory.poke(memAddress+0, 8184);
        do Memory.poke(memAddress+32, 16380);
        do Memory.poke(memAddress+64, 28686);
        do Memory.poke(memAddress+96, 24582);
        do Memory.poke(memAddress+128, 24582);
        do Memory.poke(memAddress+160, 24582);
        do Memory.poke(memAddress+192, 24582);
        do Memory.poke(memAddress+224, 24582);
        do Memory.poke(memAddress+256, 24582);
        do Memory.poke(memAddress+288, 24582);
        do Memory.poke(memAddress+320, 24582);
        do Memory.poke(memAddress+352, 24582);
        do Memory.poke(memAddress+384, 24582);
        do Memory.poke(memAddress+416, 28686);
        do Memory.poke(memAddress+448, 16380);
        do Memory.poke(memAddress+480, 8184);
        return;
    }

    method void drawQ(){
        let memAddress = 16384+letterAddress;
        do Memory.poke(memAddress+0, 8184);
        do Memory.poke(memAddress+32, 16380);
        do Memory.poke(memAddress+64, 28686);
        do Memory.poke(memAddress+96, 24582);
        do Memory.poke(memAddress+128, 24582);
        do Memory.poke(memAddress+160, 24582);
        do Memory.poke(memAddress+192, 24582);
        do Memory.poke(memAddress+224, 24582);
        do Memory.poke(memAddress+256, 24582);
        do Memory.poke(memAddress+288, 25350);
        do Memory.poke(memAddress+320, 26374);
        do Memory.poke(memAddress+352, 28166);
        do Memory.poke(memAddress+384, 31750);
        do Memory.poke(memAddress+416, 14350);
        do Memory.poke(memAddress+448, 30716);
        do Memory.poke(memAddress+480, 26616);
        return;
    }

    method void drawV(){
        let memAddress = 16384+letterAddress;
        do Memory.poke(memAddress+0, -32767);
        do Memory.poke(memAddress+32, -16381);
        do Memory.poke(memAddress+64, -16381);
        do Memory.poke(memAddress+96, 24582);
        do Memory.poke(memAddress+128, 24582);
        do Memory.poke(memAddress+160, 12300);
        do Memory.poke(memAddress+192, 12300);
        do Memory.poke(memAddress+224, 6168);
        do Memory.poke(memAddress+256, 6168);
        do Memory.poke(memAddress+288, 3120);
        do Memory.poke(memAddress+320, 3120);
        do Memory.poke(memAddress+352, 1632);
        do Memory.poke(memAddress+384, 1632);
        do Memory.poke(memAddress+416, 960);
        do Memory.poke(memAddress+448, 960);
        do Memory.poke(memAddress+480, 384);
        return;
    }

    /** disposes the object */
    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }
}