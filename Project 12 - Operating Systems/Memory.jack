// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static int free;


    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let free = 2048; // heap base
        let heap[0] = 0;
        let heap[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int temp, address, prev;
        var boolean isFirst;
        let isFirst = true;
        let temp = free;
        let prev = free;
        while (~(temp = 0)){
            if (~(temp[1] + 2 < size)){
                let address = temp + 2;
                let temp[size + 2] = temp[0];
                let temp[size + 3] = temp[1] - size - 2;
                if (isFirst){
                    let free = temp + size + 2;
                }
                else{
                    let ram[prev] = temp + size + 2;
                }
                return address;
            }
            let isFirst = false;
            let prev = temp;
            let temp = temp[0];
        }
        //do Sys.halt();
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int temp;
        let temp = free;
        let free = o - 2;
        let o[-2] = temp;
        return;
    }    
}
